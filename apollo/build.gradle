buildscript {
    repositories {
        google()
        maven { url 'https://maven.fabric.io/public' }  // Needed for crashlytics dependency
        mavenCentral()
        maven { url "https://plugins.gradle.org/m2/" }
    }

    dependencies { // Add third party gradle plugins
        classpath 'com.squareup.sqldelight:gradle-plugin:0.6.1'
    }
}

repositories {
    google()
    maven { url 'https://maven.fabric.io/public' }  // Needed for crashlytics dependency
}

apply plugin: 'com.android.library'
apply plugin: 'com.squareup.sqldelight'

/**
 * Returns the ip of the local network specified by the TESTING_LOCAL_NETWORK env var.
 */
def testingLocalIp() {
    def interfaceName = System.getenv("TESTING_LOCAL_NETWORK")?.trim()

    return NetworkInterface.getNetworkInterfaces().
            findAll { interfaceName && interfaceName.equalsIgnoreCase(it.displayName) }.
            collect { Collections.list it.getInetAddresses() }.
            flatten().
            find()?. // first or null
            getHostAddress()
}

android {
    compileSdkVersion 27
    buildToolsVersion "27.0.3"

    defaultConfig {
        minSdkVersion 19
        targetSdkVersion 27
        versionCode 1
        versionName "1.0"

        // circle
        buildConfigField("String", "TESTING_LOCAL_IP", "\"${testingLocalIp()}\"")

        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        minified {
            debuggable true
            minifyEnabled true
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    lintOptions {
        abortOnError false
        htmlReport true
        lintConfig file("${project.rootDir}/linters/android-lint/config.xml")
    }
}

ext {
    version_retrofit = '2.3.0'
}

dependencies {
    api project(':common')

    // Android support:
    api 'com.android.support:appcompat-v7:27.1.1'

    // ReactiveX:
    api 'io.reactivex:rxjava:1.3.0'
    api 'io.reactivex:rxandroid:1.2.1'

    // Dependency injection:
    api 'com.google.dagger:dagger:2.11'
    annotationProcessor 'com.google.dagger:dagger-compiler:2.11'

    compileOnly 'org.glassfish:javax.annotation:10.0-b28'

    // Logging:
    api 'com.jakewharton.timber:timber:4.5.1'

    // Money:
    api 'org.javamoney:moneta-bp:1.0'
    api 'org.zalando:jackson-datatype-money:0.12.0'

    // Firebase:
    api 'com.google.firebase:firebase-core:16.0.6'
    api 'com.google.firebase:firebase-messaging:17.3.4'
    api 'com.firebase:firebase-jobdispatcher:0.8.5'

    // Debugging:
    api('com.crashlytics.sdk.android:crashlytics:2.9.7') {
        transitive = true
    }

    api 'com.facebook.stetho:stetho:1.5.0'
    api 'com.facebook.stetho:stetho-okhttp3:1.5.0'
    api 'com.facebook.stetho:stetho-timber:1.5.0@aar'

    // Storage:
    implementation 'com.f2prateek.rx.preferences:rx-preferences:1.0.2'
    implementation 'com.squareup.sqlbrite:sqlbrite:1.1.1'
    implementation  'com.google.auto.value:auto-value-annotations:1.6'
    annotationProcessor 'com.google.auto.value:auto-value:1.6'

    // Networking:
    implementation "com.squareup.retrofit2:retrofit:$version_retrofit"
    implementation "com.squareup.retrofit2:converter-jackson:$version_retrofit"
    implementation "com.squareup.retrofit2:adapter-rxjava:$version_retrofit"
    implementation "com.squareup.retrofit2:converter-scalars:$version_retrofit"
    implementation 'com.squareup.okhttp3:logging-interceptor:3.10.0'

    // Kotlin:
    implementation "org.jetbrains.kotlin:kotlin-stdlib:$global_kotlin_version"
}
